# Generated by the protoc compiler with a custom plugin. DO NOT EDIT!
# sources: {{ file_template.name }}
#
# Copyright (c) 2012-2024 Snowflake Computing Inc. All rights reserved.
#
{{ file_template.preamble -}}
#
# This file has been generated from the original proto definition at
#
#     https://github.com/open-telemetry/opentelemetry-proto
#
# using a custom protoc compiler plugin by Snowflake Computing Inc.

from __future__ import annotations

import struct
from snowflake.telemetry._internal.serialize import (
    Enum,
    MessageMarshaler,
    Varint,
)
from typing import List
    
{% for import in file_template.imports %}
from {{ import }} import *
{% endfor %}

{% for enum in file_template.enums %}
class {{ enum.name }}(Enum):
{%- for value in enum.values %}
    {{ value.name }} = {{ value.number }}
{%- endfor %}
{% endfor %}

{% macro render_message(message) %}
class {{ message.name }}(MessageMarshaler):

{%- for field in message.fields %}
{%- if field.generator %}
    @property
    def {{ field.name }}(self) -> {{ field.python_type }}:
        if self.{{ field.attr_name }} is None:
            self.{{ field.attr_name }} = {{ field.generator }}
        return self.{{ field.attr_name }}
{%- else %}
    {{ field.name }}: {{ field.python_type }}
{%- endif %}
{%- endfor %}

    def __init__(
        self,
{%- for field in message.fields %}
        {{ field.name }}: {{ field.python_type }} = {{ field.default_val }},
{%- endfor %}
    ):
{%- for field in message.fields %}
        self.{{ field.attr_name }}: {{ field.python_type }} = {{ field.name }}
{%- endfor %}

    def calculate_size(self) -> int:
        size = 0
{%- for field in message.fields %}
        {{ field.size_field_inline | indent(8) }}
{%- endfor %}
        return size

    def write_to(self, out: bytearray) -> None:
{%- for field in message.fields %}
        {{ field.serialize_field_inline | indent(8) }}
{%- endfor %}

{% for nested_enum in message.enums %}
    class {{ nested_enum.name }}(Enum):
{%- for value in nested_enum.values %}
        {{ value.name }} = {{ value.number }}
{%- endfor %}
{% endfor %}

{% for nested_message in message.messages %}
{{ render_message(nested_message) | indent(4) }}
{% endfor %}
{% endmacro %}

{% for message in file_template.messages %}
{{ render_message(message) }}
{% endfor %}