# Generated by the protoc compiler with a custom plugin. DO NOT EDIT!
# sources: {{ file_template.name }}

from __future__ import annotations

from snowflake.telemetry._internal.serialize import (
    Enum,
    ProtoSerializer,
    MessageMarshaler,
    util,
)
from typing import List, Optional
    
{% for import in file_template.imports %}
from {{ import }} import *
{% endfor %}

{% for enum in file_template.enums %}
class {{ enum.name }}(Enum):
{%- for value in enum.values %}
    {{ value.name }} = {{ value.number }}
{%- endfor %}
{% endfor %}

{% macro render_message(message) %}
class {{ message.name }}(MessageMarshaler):
    def __init__(
        self,
{%- for field in message.fields %}
        {{ field.name }}: {{ field.python_type }} = {{ field.default_val }},
{%- endfor %}
    ):
{%- for field in message.fields %}
        self.{{ field.name }}: {{ field.python_type }} = {{ field.name }}
{%- endfor %}
        super().__init__()

    def calculate_size(self) -> int:
        size = 0
{%- for field in message.fields %}
        if self.{{ field.name }}{% if field.encode_presence %} is not None{% endif %}: {% if field.group %}# oneof group {{ field.group }}{% endif %}
            size += util.size_{{ field.proto_type }}({{ field.tag }}, self.{{ field.name }})
{%- endfor %}
        return size

    def write_to(self, proto_serializer: ProtoSerializer) -> None:
{%- for field in message.fields %}
        if self.{{ field.name }}{% if field.encode_presence %} is not None{% endif %}: {% if field.group %}# oneof group {{ field.group }}{% endif %}
            proto_serializer.serialize_{{ field.proto_type }}({{ field.tag }}, self.{{ field.name }})
{%- endfor %}

{% for nested_enum in message.enums %}
    class {{ nested_enum.name }}(Enum):
{%- for value in nested_enum.values %}
        {{ value.name }} = {{ value.number }}
{%- endfor %}
{% endfor %}

{% for nested_message in message.messages %}
{{ render_message(nested_message) | indent(4) }}
{% endfor %}
{% endmacro %}

{% for message in file_template.messages %}
{{ render_message(message) }}
{% endfor %}