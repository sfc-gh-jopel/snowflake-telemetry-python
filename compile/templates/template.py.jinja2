# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: {{ proto_file }}
# plugin: python-serialize

from snowflake.telemetry.serialize import (
    Enum,
    ProtoSerializer,
    MessageMarshaler,
)
from typing import List

{% for enum in file_template.enums %}
class {{ enum.name }}(Enum):
{%- for value in enum.values %}
    {{ value.name }} = {{ value.number }}
{%- endfor %}
{% endfor %}

{% macro render_message(message) %}
def write_to_{{ message.name }}(
    proto_serializer: ProtoSerializer,
{% for field in message.fields|reverse %}
{% if field.fields is defined %}
{% for oneof_field in field.fields|reverse %}
    {{ oneof_field.name }}: {{ oneof_field.python_type }} = {{ oneof_field.default }},
{% endfor %}
{% else %}
    {{ field.name }}: {{ field.python_type }} = {{ field.default }},
{% endif %}
{% endfor %}
    ):
{%- for field in message.fields %}
{%- if field.fields is defined %}
    # oneof group {{ field.name }}
{%- for oneof_field in field.fields %}
    {% if loop.index != 1 %}el{% endif %}if {{ oneof_field.name }} is not None:
        proto_serializer.serialize_{{ oneof_field.proto_type }}({{ oneof_field.tag }}, {{ oneof_field.name }})
{%- endfor %}
{%- else %}
    if {{ field.name }}: proto_serializer.serialize_{{ field.proto_type }}({{ field.tag }}, {{ field.name }})
{%- endif %}
{%- endfor %}
{% endmacro %}

{% for message in file_template.messages %}
{{ render_message(message) }}
{% endfor %}
