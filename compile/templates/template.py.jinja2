# Generated by the protoc compiler with a custom plugin. DO NOT EDIT!
# sources: {{ file_template.name }}

from snowflake.telemetry._internal.serialize import (
    Enum,
    ProtoSerializer,
)
from typing import List, Optional

{% for enum in file_template.enums %}
class {{ enum.name }}(Enum):
{%- for value in enum.values %}
    {{ value.name }} = {{ value.number }}
{%- endfor %}
{% endfor %}

{% macro render_message(message) %}
def {{ message.name }}(
{%- for field in message.fields %}
    {{ field.name }}: Optional[{{ field.python_type }}] = None,
{%- endfor %}
) -> bytes:
    proto_serializer = ProtoSerializer()
{%- for field in message.fields %}
    if {{ field.name }}{% if field.encode_presence %} is not None{% endif %}: {% if field.group %}# oneof group {{ field.group }}{% endif %}
        proto_serializer.serialize_{{ field.proto_type }}({{ field.tag }}, {{ field.name }})
{%- endfor %}
    return proto_serializer.out

{% for nested_enum in message.enums %}
class {{ nested_enum.name }}(Enum):
{%- for value in nested_enum.values %}
    {{ value.name }} = {{ value.number }}
{%- endfor %}
{% endfor %}

{% for nested_message in message.messages %}
{{ render_message(nested_message) }}
{% endfor %}
{% endmacro %}

{% for message in file_template.messages %}
{{ render_message(message) }}
{% endfor %}
