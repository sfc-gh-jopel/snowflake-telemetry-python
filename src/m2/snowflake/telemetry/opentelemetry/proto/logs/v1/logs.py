# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources:
# plugin: python-serialize

from typing import List

from m2.snowflake.telemetry.serialize import (
    Enum,
    MessageMarshaler,
    ProtoSerializer,
)


class SeverityNumber(Enum):
    SEVERITY_NUMBER_UNSPECIFIED = 0
    SEVERITY_NUMBER_TRACE = 1
    SEVERITY_NUMBER_TRACE2 = 2
    SEVERITY_NUMBER_TRACE3 = 3
    SEVERITY_NUMBER_TRACE4 = 4
    SEVERITY_NUMBER_DEBUG = 5
    SEVERITY_NUMBER_DEBUG2 = 6
    SEVERITY_NUMBER_DEBUG3 = 7
    SEVERITY_NUMBER_DEBUG4 = 8
    SEVERITY_NUMBER_INFO = 9
    SEVERITY_NUMBER_INFO2 = 10
    SEVERITY_NUMBER_INFO3 = 11
    SEVERITY_NUMBER_INFO4 = 12
    SEVERITY_NUMBER_WARN = 13
    SEVERITY_NUMBER_WARN2 = 14
    SEVERITY_NUMBER_WARN3 = 15
    SEVERITY_NUMBER_WARN4 = 16
    SEVERITY_NUMBER_ERROR = 17
    SEVERITY_NUMBER_ERROR2 = 18
    SEVERITY_NUMBER_ERROR3 = 19
    SEVERITY_NUMBER_ERROR4 = 20
    SEVERITY_NUMBER_FATAL = 21
    SEVERITY_NUMBER_FATAL2 = 22
    SEVERITY_NUMBER_FATAL3 = 23
    SEVERITY_NUMBER_FATAL4 = 24


class LogRecordFlags(Enum):
    LOG_RECORD_FLAGS_DO_NOT_USE = 0
    LOG_RECORD_FLAGS_TRACE_FLAGS_MASK = 255


class LogsData(MessageMarshaler):
    def __init__(
        self,
        resource_logs: List[MessageMarshaler] = None,
    ):
        self.resource_logs = resource_logs

    def write_to(self, proto_serializer: ProtoSerializer) -> None:
        if self.resource_logs:
            proto_serializer.serialize_repeated_message(b"\n", self.resource_logs)


class ResourceLogs(MessageMarshaler):
    def __init__(
        self,
        resource: MessageMarshaler = None,
        scope_logs: List[MessageMarshaler] = None,
        schema_url: str = "",
    ):
        self.resource = resource
        self.scope_logs = scope_logs
        self.schema_url = schema_url

    def write_to(self, proto_serializer: ProtoSerializer) -> None:
        if self.schema_url:
            proto_serializer.serialize_string(b"\x1a", self.schema_url)
        if self.scope_logs:
            proto_serializer.serialize_repeated_message(b"\x12", self.scope_logs)
        if self.resource:
            proto_serializer.serialize_message(b"\n", self.resource)


class ScopeLogs(MessageMarshaler):
    def __init__(
        self,
        scope: MessageMarshaler = None,
        log_records: List[MessageMarshaler] = None,
        schema_url: str = "",
    ):
        self.scope = scope
        self.log_records = log_records
        self.schema_url = schema_url

    def write_to(self, proto_serializer: ProtoSerializer) -> None:
        if self.schema_url:
            proto_serializer.serialize_string(b"\x1a", self.schema_url)
        if self.log_records:
            proto_serializer.serialize_repeated_message(b"\x12", self.log_records)
        if self.scope:
            proto_serializer.serialize_message(b"\n", self.scope)


class LogRecord(MessageMarshaler):
    def __init__(
        self,
        time_unix_nano: int = 0,
        severity_number: int = 0,
        severity_text: str = "",
        body: MessageMarshaler = None,
        attributes: List[MessageMarshaler] = None,
        dropped_attributes_count: int = 0,
        flags: int = 0,
        trace_id: bytes = b"",
        span_id: bytes = b"",
        observed_time_unix_nano: int = 0,
    ):
        self.time_unix_nano = time_unix_nano
        self.severity_number = severity_number
        self.severity_text = severity_text
        self.body = body
        self.attributes = attributes
        self.dropped_attributes_count = dropped_attributes_count
        self.flags = flags
        self.trace_id = trace_id
        self.span_id = span_id
        self.observed_time_unix_nano = observed_time_unix_nano

    def write_to(self, proto_serializer: ProtoSerializer) -> None:
        if self.observed_time_unix_nano:
            proto_serializer.serialize_fixed64(b"Y", self.observed_time_unix_nano)
        if self.span_id:
            proto_serializer.serialize_bytes(b"R", self.span_id)
        if self.trace_id:
            proto_serializer.serialize_bytes(b"J", self.trace_id)
        if self.flags:
            proto_serializer.serialize_fixed32(b"E", self.flags)
        if self.dropped_attributes_count:
            proto_serializer.serialize_uint32(b"8", self.dropped_attributes_count)
        if self.attributes:
            proto_serializer.serialize_repeated_message(b"2", self.attributes)
        if self.body:
            proto_serializer.serialize_message(b"*", self.body)
        if self.severity_text:
            proto_serializer.serialize_string(b"\x1a", self.severity_text)
        if self.severity_number:
            proto_serializer.serialize_enum(b"\x10", self.severity_number)
        if self.time_unix_nano:
            proto_serializer.serialize_fixed64(b"\t", self.time_unix_nano)
