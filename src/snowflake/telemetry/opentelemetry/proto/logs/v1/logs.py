# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources:
# plugin: python-serialize

from typing import (
    Any,
    Dict,
    List,
    Optional,
)

from snowflake.telemetry.serialize import (
    Enum,
    ProtoSerializer,
    util,
)


class SeverityNumber(Enum):
    SEVERITY_NUMBER_UNSPECIFIED = 0
    SEVERITY_NUMBER_TRACE = 1
    SEVERITY_NUMBER_TRACE2 = 2
    SEVERITY_NUMBER_TRACE3 = 3
    SEVERITY_NUMBER_TRACE4 = 4
    SEVERITY_NUMBER_DEBUG = 5
    SEVERITY_NUMBER_DEBUG2 = 6
    SEVERITY_NUMBER_DEBUG3 = 7
    SEVERITY_NUMBER_DEBUG4 = 8
    SEVERITY_NUMBER_INFO = 9
    SEVERITY_NUMBER_INFO2 = 10
    SEVERITY_NUMBER_INFO3 = 11
    SEVERITY_NUMBER_INFO4 = 12
    SEVERITY_NUMBER_WARN = 13
    SEVERITY_NUMBER_WARN2 = 14
    SEVERITY_NUMBER_WARN3 = 15
    SEVERITY_NUMBER_WARN4 = 16
    SEVERITY_NUMBER_ERROR = 17
    SEVERITY_NUMBER_ERROR2 = 18
    SEVERITY_NUMBER_ERROR3 = 19
    SEVERITY_NUMBER_ERROR4 = 20
    SEVERITY_NUMBER_FATAL = 21
    SEVERITY_NUMBER_FATAL2 = 22
    SEVERITY_NUMBER_FATAL3 = 23
    SEVERITY_NUMBER_FATAL4 = 24


class LogRecordFlags(Enum):
    LOG_RECORD_FLAGS_DO_NOT_USE = 0
    LOG_RECORD_FLAGS_TRACE_FLAGS_MASK = 255


def LogsData(
    resource_logs: Optional[List[Dict[str, Any]]] = None,
) -> Dict[str, Any]:
    size = 0
    if resource_logs:
        size += util.size_repeated_message(b"\n", resource_logs)

    return {
        "__size": size,
        "__serialize_function": write_to_LogsData,
        "resource_logs": resource_logs,
    }


def write_to_LogsData(
    message: Dict[str, Any], proto_serializer: ProtoSerializer
) -> None:
    if message["resource_logs"]:
        proto_serializer.serialize_repeated_message(b"\n", message["resource_logs"])


def ResourceLogs(
    resource: Optional[Dict[str, Any]] = None,
    scope_logs: Optional[List[Dict[str, Any]]] = None,
    schema_url: Optional[str] = None,
) -> Dict[str, Any]:
    size = 0
    if resource:
        size += util.size_message(b"\n", resource)
    if scope_logs:
        size += util.size_repeated_message(b"\x12", scope_logs)
    if schema_url:
        size += util.size_string(b"\x1a", schema_url)

    return {
        "__size": size,
        "__serialize_function": write_to_ResourceLogs,
        "resource": resource,
        "scope_logs": scope_logs,
        "schema_url": schema_url,
    }


def write_to_ResourceLogs(
    message: Dict[str, Any], proto_serializer: ProtoSerializer
) -> None:
    if message["resource"]:
        proto_serializer.serialize_message(b"\n", message["resource"])
    if message["scope_logs"]:
        proto_serializer.serialize_repeated_message(b"\x12", message["scope_logs"])
    if message["schema_url"]:
        proto_serializer.serialize_string(b"\x1a", message["schema_url"])


def ScopeLogs(
    scope: Optional[Dict[str, Any]] = None,
    log_records: Optional[List[Dict[str, Any]]] = None,
    schema_url: Optional[str] = None,
) -> Dict[str, Any]:
    size = 0
    if scope:
        size += util.size_message(b"\n", scope)
    if log_records:
        size += util.size_repeated_message(b"\x12", log_records)
    if schema_url:
        size += util.size_string(b"\x1a", schema_url)

    return {
        "__size": size,
        "__serialize_function": write_to_ScopeLogs,
        "scope": scope,
        "log_records": log_records,
        "schema_url": schema_url,
    }


def write_to_ScopeLogs(
    message: Dict[str, Any], proto_serializer: ProtoSerializer
) -> None:
    if message["scope"]:
        proto_serializer.serialize_message(b"\n", message["scope"])
    if message["log_records"]:
        proto_serializer.serialize_repeated_message(b"\x12", message["log_records"])
    if message["schema_url"]:
        proto_serializer.serialize_string(b"\x1a", message["schema_url"])


def LogRecord(
    time_unix_nano: Optional[int] = None,
    severity_number: Optional[int] = None,
    severity_text: Optional[str] = None,
    body: Optional[Dict[str, Any]] = None,
    attributes: Optional[List[Dict[str, Any]]] = None,
    dropped_attributes_count: Optional[int] = None,
    flags: Optional[int] = None,
    trace_id: Optional[bytes] = None,
    span_id: Optional[bytes] = None,
    observed_time_unix_nano: Optional[int] = None,
) -> Dict[str, Any]:
    size = 0
    if time_unix_nano:
        size += util.size_fixed64(b"\t", time_unix_nano)
    if severity_number:
        size += util.size_enum(b"\x10", severity_number)
    if severity_text:
        size += util.size_string(b"\x1a", severity_text)
    if body:
        size += util.size_message(b"*", body)
    if attributes:
        size += util.size_repeated_message(b"2", attributes)
    if dropped_attributes_count:
        size += util.size_uint32(b"8", dropped_attributes_count)
    if flags:
        size += util.size_fixed32(b"E", flags)
    if trace_id:
        size += util.size_bytes(b"J", trace_id)
    if span_id:
        size += util.size_bytes(b"R", span_id)
    if observed_time_unix_nano:
        size += util.size_fixed64(b"Y", observed_time_unix_nano)

    return {
        "__size": size,
        "__serialize_function": write_to_LogRecord,
        "time_unix_nano": time_unix_nano,
        "severity_number": severity_number,
        "severity_text": severity_text,
        "body": body,
        "attributes": attributes,
        "dropped_attributes_count": dropped_attributes_count,
        "flags": flags,
        "trace_id": trace_id,
        "span_id": span_id,
        "observed_time_unix_nano": observed_time_unix_nano,
    }


def write_to_LogRecord(
    message: Dict[str, Any], proto_serializer: ProtoSerializer
) -> None:
    if message["time_unix_nano"]:
        proto_serializer.serialize_fixed64(b"\t", message["time_unix_nano"])
    if message["severity_number"]:
        proto_serializer.serialize_enum(b"\x10", message["severity_number"])
    if message["severity_text"]:
        proto_serializer.serialize_string(b"\x1a", message["severity_text"])
    if message["body"]:
        proto_serializer.serialize_message(b"*", message["body"])
    if message["attributes"]:
        proto_serializer.serialize_repeated_message(b"2", message["attributes"])
    if message["dropped_attributes_count"]:
        proto_serializer.serialize_uint32(b"8", message["dropped_attributes_count"])
    if message["flags"]:
        proto_serializer.serialize_fixed32(b"E", message["flags"])
    if message["trace_id"]:
        proto_serializer.serialize_bytes(b"J", message["trace_id"])
    if message["span_id"]:
        proto_serializer.serialize_bytes(b"R", message["span_id"])
    if message["observed_time_unix_nano"]:
        proto_serializer.serialize_fixed64(b"Y", message["observed_time_unix_nano"])
