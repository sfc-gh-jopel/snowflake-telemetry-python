# Generated by the protoc compiler with a custom plugin. DO NOT EDIT!
# sources: opentelemetry/proto/metrics/v1/metrics.proto

from typing import (
    List,
    Optional,
)

from snowflake.telemetry._internal.serialize import (
    Enum,
    ProtoSerializer,
)


class AggregationTemporality(Enum):
    AGGREGATION_TEMPORALITY_UNSPECIFIED = 0
    AGGREGATION_TEMPORALITY_DELTA = 1
    AGGREGATION_TEMPORALITY_CUMULATIVE = 2


class DataPointFlags(Enum):
    DATA_POINT_FLAGS_DO_NOT_USE = 0
    DATA_POINT_FLAGS_NO_RECORDED_VALUE_MASK = 1


def MetricsData(
    resource_metrics: Optional[List[bytes]] = None,
) -> bytes:
    proto_serializer = ProtoSerializer()
    if resource_metrics:
        proto_serializer.serialize_repeated_message(b"\n", resource_metrics)
    return proto_serializer.out


def ResourceMetrics(
    resource: Optional[bytes] = None,
    scope_metrics: Optional[List[bytes]] = None,
    schema_url: Optional[str] = None,
) -> bytes:
    proto_serializer = ProtoSerializer()
    if resource is not None:
        proto_serializer.serialize_message(b"\n", resource)
    if scope_metrics:
        proto_serializer.serialize_repeated_message(b"\x12", scope_metrics)
    if schema_url:
        proto_serializer.serialize_string(b"\x1a", schema_url)
    return proto_serializer.out


def ScopeMetrics(
    scope: Optional[bytes] = None,
    metrics: Optional[List[bytes]] = None,
    schema_url: Optional[str] = None,
) -> bytes:
    proto_serializer = ProtoSerializer()
    if scope is not None:
        proto_serializer.serialize_message(b"\n", scope)
    if metrics:
        proto_serializer.serialize_repeated_message(b"\x12", metrics)
    if schema_url:
        proto_serializer.serialize_string(b"\x1a", schema_url)
    return proto_serializer.out


def Metric(
    name: Optional[str] = None,
    description: Optional[str] = None,
    unit: Optional[str] = None,
    gauge: Optional[bytes] = None,
    sum: Optional[bytes] = None,
    histogram: Optional[bytes] = None,
    exponential_histogram: Optional[bytes] = None,
    summary: Optional[bytes] = None,
    metadata: Optional[List[bytes]] = None,
) -> bytes:
    proto_serializer = ProtoSerializer()
    if name:
        proto_serializer.serialize_string(b"\n", name)
    if description:
        proto_serializer.serialize_string(b"\x12", description)
    if unit:
        proto_serializer.serialize_string(b"\x1a", unit)
    if gauge is not None:  # oneof group data
        proto_serializer.serialize_message(b"*", gauge)
    if sum is not None:  # oneof group data
        proto_serializer.serialize_message(b":", sum)
    if histogram is not None:  # oneof group data
        proto_serializer.serialize_message(b"J", histogram)
    if exponential_histogram is not None:  # oneof group data
        proto_serializer.serialize_message(b"R", exponential_histogram)
    if summary is not None:  # oneof group data
        proto_serializer.serialize_message(b"Z", summary)
    if metadata:
        proto_serializer.serialize_repeated_message(b"b", metadata)
    return proto_serializer.out


def Gauge(
    data_points: Optional[List[bytes]] = None,
) -> bytes:
    proto_serializer = ProtoSerializer()
    if data_points:
        proto_serializer.serialize_repeated_message(b"\n", data_points)
    return proto_serializer.out


def Sum(
    data_points: Optional[List[bytes]] = None,
    aggregation_temporality: Optional[int] = None,
    is_monotonic: Optional[bool] = None,
) -> bytes:
    proto_serializer = ProtoSerializer()
    if data_points:
        proto_serializer.serialize_repeated_message(b"\n", data_points)
    if aggregation_temporality:
        proto_serializer.serialize_enum(b"\x10", aggregation_temporality)
    if is_monotonic:
        proto_serializer.serialize_bool(b"\x18", is_monotonic)
    return proto_serializer.out


def Histogram(
    data_points: Optional[List[bytes]] = None,
    aggregation_temporality: Optional[int] = None,
) -> bytes:
    proto_serializer = ProtoSerializer()
    if data_points:
        proto_serializer.serialize_repeated_message(b"\n", data_points)
    if aggregation_temporality:
        proto_serializer.serialize_enum(b"\x10", aggregation_temporality)
    return proto_serializer.out


def ExponentialHistogram(
    data_points: Optional[List[bytes]] = None,
    aggregation_temporality: Optional[int] = None,
) -> bytes:
    proto_serializer = ProtoSerializer()
    if data_points:
        proto_serializer.serialize_repeated_message(b"\n", data_points)
    if aggregation_temporality:
        proto_serializer.serialize_enum(b"\x10", aggregation_temporality)
    return proto_serializer.out


def Summary(
    data_points: Optional[List[bytes]] = None,
) -> bytes:
    proto_serializer = ProtoSerializer()
    if data_points:
        proto_serializer.serialize_repeated_message(b"\n", data_points)
    return proto_serializer.out


def NumberDataPoint(
    start_time_unix_nano: Optional[int] = None,
    time_unix_nano: Optional[int] = None,
    as_double: Optional[float] = None,
    exemplars: Optional[List[bytes]] = None,
    as_int: Optional[int] = None,
    attributes: Optional[List[bytes]] = None,
    flags: Optional[int] = None,
) -> bytes:
    proto_serializer = ProtoSerializer()
    if start_time_unix_nano:
        proto_serializer.serialize_fixed64(b"\x11", start_time_unix_nano)
    if time_unix_nano:
        proto_serializer.serialize_fixed64(b"\x19", time_unix_nano)
    if as_double is not None:  # oneof group value
        proto_serializer.serialize_double(b"!", as_double)
    if exemplars:
        proto_serializer.serialize_repeated_message(b"*", exemplars)
    if as_int is not None:  # oneof group value
        proto_serializer.serialize_sfixed64(b"1", as_int)
    if attributes:
        proto_serializer.serialize_repeated_message(b":", attributes)
    if flags:
        proto_serializer.serialize_uint32(b"@", flags)
    return proto_serializer.out


def HistogramDataPoint(
    start_time_unix_nano: Optional[int] = None,
    time_unix_nano: Optional[int] = None,
    count: Optional[int] = None,
    sum: Optional[float] = None,
    bucket_counts: Optional[List[int]] = None,
    explicit_bounds: Optional[List[float]] = None,
    exemplars: Optional[List[bytes]] = None,
    attributes: Optional[List[bytes]] = None,
    flags: Optional[int] = None,
    min: Optional[float] = None,
    max: Optional[float] = None,
) -> bytes:
    proto_serializer = ProtoSerializer()
    if start_time_unix_nano:
        proto_serializer.serialize_fixed64(b"\x11", start_time_unix_nano)
    if time_unix_nano:
        proto_serializer.serialize_fixed64(b"\x19", time_unix_nano)
    if count:
        proto_serializer.serialize_fixed64(b"!", count)
    if sum is not None:  # oneof group _sum
        proto_serializer.serialize_double(b")", sum)
    if bucket_counts:
        proto_serializer.serialize_repeated_fixed64(b"2", bucket_counts)
    if explicit_bounds:
        proto_serializer.serialize_repeated_double(b":", explicit_bounds)
    if exemplars:
        proto_serializer.serialize_repeated_message(b"B", exemplars)
    if attributes:
        proto_serializer.serialize_repeated_message(b"J", attributes)
    if flags:
        proto_serializer.serialize_uint32(b"P", flags)
    if min is not None:  # oneof group _min
        proto_serializer.serialize_double(b"Y", min)
    if max is not None:  # oneof group _max
        proto_serializer.serialize_double(b"a", max)
    return proto_serializer.out


def ExponentialHistogramDataPoint(
    attributes: Optional[List[bytes]] = None,
    start_time_unix_nano: Optional[int] = None,
    time_unix_nano: Optional[int] = None,
    count: Optional[int] = None,
    sum: Optional[float] = None,
    scale: Optional[int] = None,
    zero_count: Optional[int] = None,
    positive: Optional[bytes] = None,
    negative: Optional[bytes] = None,
    flags: Optional[int] = None,
    exemplars: Optional[List[bytes]] = None,
    min: Optional[float] = None,
    max: Optional[float] = None,
    zero_threshold: Optional[float] = None,
) -> bytes:
    proto_serializer = ProtoSerializer()
    if attributes:
        proto_serializer.serialize_repeated_message(b"\n", attributes)
    if start_time_unix_nano:
        proto_serializer.serialize_fixed64(b"\x11", start_time_unix_nano)
    if time_unix_nano:
        proto_serializer.serialize_fixed64(b"\x19", time_unix_nano)
    if count:
        proto_serializer.serialize_fixed64(b"!", count)
    if sum is not None:  # oneof group _sum
        proto_serializer.serialize_double(b")", sum)
    if scale:
        proto_serializer.serialize_sint32(b"0", scale)
    if zero_count:
        proto_serializer.serialize_fixed64(b"9", zero_count)
    if positive is not None:
        proto_serializer.serialize_message(b"B", positive)
    if negative is not None:
        proto_serializer.serialize_message(b"J", negative)
    if flags:
        proto_serializer.serialize_uint32(b"P", flags)
    if exemplars:
        proto_serializer.serialize_repeated_message(b"Z", exemplars)
    if min is not None:  # oneof group _min
        proto_serializer.serialize_double(b"a", min)
    if max is not None:  # oneof group _max
        proto_serializer.serialize_double(b"i", max)
    if zero_threshold:
        proto_serializer.serialize_double(b"q", zero_threshold)
    return proto_serializer.out


def ExponentialHistogramDataPoint_Buckets(
    offset: Optional[int] = None,
    bucket_counts: Optional[List[int]] = None,
) -> bytes:
    proto_serializer = ProtoSerializer()
    if offset:
        proto_serializer.serialize_sint32(b"\x08", offset)
    if bucket_counts:
        proto_serializer.serialize_repeated_uint64(b"\x12", bucket_counts)
    return proto_serializer.out


def SummaryDataPoint(
    start_time_unix_nano: Optional[int] = None,
    time_unix_nano: Optional[int] = None,
    count: Optional[int] = None,
    sum: Optional[float] = None,
    quantile_values: Optional[List[bytes]] = None,
    attributes: Optional[List[bytes]] = None,
    flags: Optional[int] = None,
) -> bytes:
    proto_serializer = ProtoSerializer()
    if start_time_unix_nano:
        proto_serializer.serialize_fixed64(b"\x11", start_time_unix_nano)
    if time_unix_nano:
        proto_serializer.serialize_fixed64(b"\x19", time_unix_nano)
    if count:
        proto_serializer.serialize_fixed64(b"!", count)
    if sum:
        proto_serializer.serialize_double(b")", sum)
    if quantile_values:
        proto_serializer.serialize_repeated_message(b"2", quantile_values)
    if attributes:
        proto_serializer.serialize_repeated_message(b":", attributes)
    if flags:
        proto_serializer.serialize_uint32(b"@", flags)
    return proto_serializer.out


def SummaryDataPoint_ValueAtQuantile(
    quantile: Optional[float] = None,
    value: Optional[float] = None,
) -> bytes:
    proto_serializer = ProtoSerializer()
    if quantile:
        proto_serializer.serialize_double(b"\t", quantile)
    if value:
        proto_serializer.serialize_double(b"\x11", value)
    return proto_serializer.out


def Exemplar(
    time_unix_nano: Optional[int] = None,
    as_double: Optional[float] = None,
    span_id: Optional[bytes] = None,
    trace_id: Optional[bytes] = None,
    as_int: Optional[int] = None,
    filtered_attributes: Optional[List[bytes]] = None,
) -> bytes:
    proto_serializer = ProtoSerializer()
    if time_unix_nano:
        proto_serializer.serialize_fixed64(b"\x11", time_unix_nano)
    if as_double is not None:  # oneof group value
        proto_serializer.serialize_double(b"\x19", as_double)
    if span_id:
        proto_serializer.serialize_bytes(b'"', span_id)
    if trace_id:
        proto_serializer.serialize_bytes(b"*", trace_id)
    if as_int is not None:  # oneof group value
        proto_serializer.serialize_sfixed64(b"1", as_int)
    if filtered_attributes:
        proto_serializer.serialize_repeated_message(b":", filtered_attributes)
    return proto_serializer.out
