# Generated by the protoc compiler with a custom plugin. DO NOT EDIT!
# sources: opentelemetry/proto/collector/metrics/v1/metrics_service.proto

from typing import (
    List,
    Optional,
)

from snowflake.telemetry._internal.opentelemetry.proto.metrics.v1 import *
from snowflake.telemetry._internal.serialize import (
    Enum,
    MessageMarshaler,
    ProtoSerializer,
    util,
)


class ExportMetricsServiceRequest(MessageMarshaler):
    resource_metrics: List["ResourceMetrics"]

    def __init__(
        self,
        resource_metrics=None,
    ):
        self._resource_metrics = resource_metrics
        super().__init__()

    def calculate_size(self) -> int:
        __size = 0
        if self._resource_metrics:
            __size += util.size_repeated_message(b"\n", self._resource_metrics)
        return __size

    def write_to(self, proto_serializer: ProtoSerializer) -> None:
        if self._resource_metrics:
            proto_serializer.serialize_repeated_message(b"\n", self._resource_metrics)


class ExportMetricsServiceResponse(MessageMarshaler):
    partial_success: "ExportMetricsPartialSuccess"

    def __init__(
        self,
        partial_success=None,
    ):
        self._partial_success = partial_success
        super().__init__()

    def calculate_size(self) -> int:
        __size = 0
        if self._partial_success is not None:
            __size += util.size_message(b"\n", self._partial_success)
        return __size

    def write_to(self, proto_serializer: ProtoSerializer) -> None:
        if self._partial_success is not None:
            proto_serializer.serialize_message(b"\n", self._partial_success)


class ExportMetricsPartialSuccess(MessageMarshaler):
    rejected_data_points: int
    error_message: str

    def __init__(
        self,
        rejected_data_points=0,
        error_message="",
    ):
        self.rejected_data_points = rejected_data_points
        self.error_message = error_message
        super().__init__()

    def calculate_size(self) -> int:
        __size = 0
        if self.rejected_data_points:
            __size += util.size_int64(b"\x08", self.rejected_data_points)
        if self.error_message:
            __size += util.size_string(b"\x12", self.error_message)
        return __size

    def write_to(self, proto_serializer: ProtoSerializer) -> None:
        if self.rejected_data_points:
            proto_serializer.serialize_int64(b"\x08", self.rejected_data_points)
        if self.error_message:
            proto_serializer.serialize_string(b"\x12", self.error_message)
