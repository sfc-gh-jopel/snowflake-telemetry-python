# Generated by the protoc compiler with a custom plugin. DO NOT EDIT!
# sources: opentelemetry/proto/collector/trace/v1/trace_service.proto

from typing import (
    List,
    Optional,
)

from snowflake.telemetry._internal.opentelemetry.proto.trace.v1 import *
from snowflake.telemetry._internal.serialize import (
    Enum,
    MessageMarshaler,
    ProtoSerializer,
    util,
)


class ExportTraceServiceRequest(MessageMarshaler):
    resource_spans: List["ResourceSpans"]

    def __init__(
        self,
        resource_spans=None,
    ):
        self._resource_spans = resource_spans

        __size = 0
        if resource_spans:
            __size += util.size_repeated_message(b"\n", resource_spans)
        super().__init__(__size)

    def write_to(self, proto_serializer: ProtoSerializer) -> None:
        if self._resource_spans:
            proto_serializer.serialize_repeated_message(b"\n", self._resource_spans)


class ExportTraceServiceResponse(MessageMarshaler):
    partial_success: "ExportTracePartialSuccess"

    def __init__(
        self,
        partial_success=None,
    ):
        self._partial_success = partial_success

        __size = 0
        if partial_success is not None:
            __size += util.size_message(b"\n", partial_success)
        super().__init__(__size)

    def write_to(self, proto_serializer: ProtoSerializer) -> None:
        if self._partial_success is not None:
            proto_serializer.serialize_message(b"\n", self._partial_success)


class ExportTracePartialSuccess(MessageMarshaler):
    rejected_spans: int
    error_message: str

    def __init__(
        self,
        rejected_spans=0,
        error_message="",
    ):
        self.rejected_spans = rejected_spans
        self.error_message = error_message

        __size = 0
        if rejected_spans:
            __size += util.size_int64(b"\x08", rejected_spans)
        if error_message:
            __size += util.size_string(b"\x12", error_message)
        super().__init__(__size)

    def write_to(self, proto_serializer: ProtoSerializer) -> None:
        if self.rejected_spans:
            proto_serializer.serialize_int64(b"\x08", self.rejected_spans)
        if self.error_message:
            proto_serializer.serialize_string(b"\x12", self.error_message)
