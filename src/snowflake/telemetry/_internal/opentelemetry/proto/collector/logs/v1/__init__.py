# Generated by the protoc compiler with a custom plugin. DO NOT EDIT!
# sources: opentelemetry/proto/collector/logs/v1/logs_service.proto

from __future__ import annotations

import struct
from typing import (
    List,
    Optional,
)

from snowflake.telemetry._internal.opentelemetry.proto.logs.v1 import *
from snowflake.telemetry._internal.serialize import (
    Enum,
    MessageMarshaler,
    ProtoSerializer,
    size_varint32,
    size_varint64,
)


class ExportLogsServiceRequest(MessageMarshaler):
    def __init__(
        self,
        resource_logs: List[ResourceLogs] = None,
    ):
        self.resource_logs: List[ResourceLogs] = resource_logs

    def calculate_size(self) -> int:
        size = 0
        if self.resource_logs:
            size += sum(
                message._get_size() + len(b"\n") + size_varint32(message._get_size())
                for message in self.resource_logs
            )
        return size

    def write_to(self, proto_serializer: ProtoSerializer) -> None:
        if self.resource_logs:
            for v in self.resource_logs:
                proto_serializer.out.write(b"\n")
                proto_serializer._write_varint_unsigned(v._get_size())
                v.write_to(proto_serializer)


class ExportLogsServiceResponse(MessageMarshaler):
    def __init__(
        self,
        partial_success: ExportLogsPartialSuccess = None,
    ):
        self.partial_success: ExportLogsPartialSuccess = partial_success

    def calculate_size(self) -> int:
        size = 0
        if self.partial_success is not None:
            size += (
                len(b"\n")
                + size_varint32(self.partial_success._get_size())
                + self.partial_success._get_size()
            )
        return size

    def write_to(self, proto_serializer: ProtoSerializer) -> None:
        if self.partial_success is not None:
            proto_serializer.out.write(b"\n")
            proto_serializer._write_varint_unsigned(self.partial_success._get_size())
            self.partial_success.write_to(proto_serializer)


class ExportLogsPartialSuccess(MessageMarshaler):
    def __init__(
        self,
        rejected_log_records: int = 0,
        error_message: str = "",
    ):
        self.rejected_log_records: int = rejected_log_records
        self.error_message: str = error_message

    def calculate_size(self) -> int:
        size = 0
        if self.rejected_log_records:
            size += len(b"\x08") + size_varint64(
                self.rejected_log_records + (1 << 64)
                if self.rejected_log_records < 0
                else self.rejected_log_records
            )
        if self.error_message:
            v = self.error_message.encode("utf-8")
            self._error_message_encoded = v
            size += len(b"\x12") + size_varint32(len(v)) + len(v)
        return size

    def write_to(self, proto_serializer: ProtoSerializer) -> None:
        if self.rejected_log_records:
            proto_serializer.out.write(b"\x08")
            proto_serializer._write_varint_unsigned(
                self.rejected_log_records + (1 << 64)
                if self.rejected_log_records < 0
                else self.rejected_log_records
            )
        if self.error_message:
            v = self._error_message_encoded
            proto_serializer.out.write(b"\x12")
            proto_serializer._write_varint_unsigned(len(v))
            proto_serializer.out.write(v)
