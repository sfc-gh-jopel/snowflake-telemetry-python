# Generated by the protoc compiler with a custom plugin. DO NOT EDIT!
# sources: opentelemetry/proto/common/v1/common.proto

from typing import (
    List,
    Optional,
)

from snowflake.telemetry._internal.serialize import (
    Enum,
    MessageMarshaler,
    ProtoSerializer,
    util,
)


class AnyValue(MessageMarshaler):
    string_value: str
    bool_value: bool
    int_value: int
    double_value: float
    array_value: "ArrayValue"
    kvlist_value: "KeyValueList"
    bytes_value: bytes

    def __init__(
        self,
        string_value=None,
        bool_value=None,
        int_value=None,
        double_value=None,
        array_value=None,
        kvlist_value=None,
        bytes_value=None,
    ):
        self.string_value = string_value
        self.bool_value = bool_value
        self.int_value = int_value
        self.double_value = double_value
        self._array_value = array_value
        self._kvlist_value = kvlist_value
        self.bytes_value = bytes_value

        __size = 0
        if string_value is not None:  # oneof group value
            __size += util.size_string(b"\n", string_value)
        if bool_value is not None:  # oneof group value
            __size += util.size_bool(b"\x10", bool_value)
        if int_value is not None:  # oneof group value
            __size += util.size_int64(b"\x18", int_value)
        if double_value is not None:  # oneof group value
            __size += util.size_double(b"!", double_value)
        if array_value is not None:  # oneof group value
            __size += util.size_message(b"*", array_value)
        if kvlist_value is not None:  # oneof group value
            __size += util.size_message(b"2", kvlist_value)
        if bytes_value is not None:  # oneof group value
            __size += util.size_bytes(b":", bytes_value)
        super().__init__(__size)

    def write_to(self, proto_serializer: ProtoSerializer) -> None:
        if self.string_value is not None:  # oneof group value
            proto_serializer.serialize_string(b"\n", self.string_value)
        if self.bool_value is not None:  # oneof group value
            proto_serializer.serialize_bool(b"\x10", self.bool_value)
        if self.int_value is not None:  # oneof group value
            proto_serializer.serialize_int64(b"\x18", self.int_value)
        if self.double_value is not None:  # oneof group value
            proto_serializer.serialize_double(b"!", self.double_value)
        if self._array_value is not None:  # oneof group value
            proto_serializer.serialize_message(b"*", self._array_value)
        if self._kvlist_value is not None:  # oneof group value
            proto_serializer.serialize_message(b"2", self._kvlist_value)
        if self.bytes_value is not None:  # oneof group value
            proto_serializer.serialize_bytes(b":", self.bytes_value)


class ArrayValue(MessageMarshaler):
    values: List["AnyValue"]

    def __init__(
        self,
        values=None,
    ):
        self._values = values

        __size = 0
        if values:
            __size += util.size_repeated_message(b"\n", values)
        super().__init__(__size)

    def write_to(self, proto_serializer: ProtoSerializer) -> None:
        if self._values:
            proto_serializer.serialize_repeated_message(b"\n", self._values)


class KeyValueList(MessageMarshaler):
    values: List["KeyValue"]

    def __init__(
        self,
        values=None,
    ):
        self._values = values

        __size = 0
        if values:
            __size += util.size_repeated_message(b"\n", values)
        super().__init__(__size)

    def write_to(self, proto_serializer: ProtoSerializer) -> None:
        if self._values:
            proto_serializer.serialize_repeated_message(b"\n", self._values)


class KeyValue(MessageMarshaler):
    key: str
    value: "AnyValue"

    def __init__(
        self,
        key="",
        value=None,
    ):
        self.key = key
        self._value = value

        __size = 0
        if key:
            __size += util.size_string(b"\n", key)
        if value is not None:
            __size += util.size_message(b"\x12", value)
        super().__init__(__size)

    def write_to(self, proto_serializer: ProtoSerializer) -> None:
        if self.key:
            proto_serializer.serialize_string(b"\n", self.key)
        if self._value is not None:
            proto_serializer.serialize_message(b"\x12", self._value)


class InstrumentationScope(MessageMarshaler):
    name: str
    version: str
    attributes: List["KeyValue"]
    dropped_attributes_count: int

    def __init__(
        self,
        name="",
        version="",
        attributes=None,
        dropped_attributes_count=0,
    ):
        self.name = name
        self.version = version
        self._attributes = attributes
        self.dropped_attributes_count = dropped_attributes_count

        __size = 0
        if name:
            __size += util.size_string(b"\n", name)
        if version:
            __size += util.size_string(b"\x12", version)
        if attributes:
            __size += util.size_repeated_message(b"\x1a", attributes)
        if dropped_attributes_count:
            __size += util.size_uint32(b" ", dropped_attributes_count)
        super().__init__(__size)

    def write_to(self, proto_serializer: ProtoSerializer) -> None:
        if self.name:
            proto_serializer.serialize_string(b"\n", self.name)
        if self.version:
            proto_serializer.serialize_string(b"\x12", self.version)
        if self._attributes:
            proto_serializer.serialize_repeated_message(b"\x1a", self._attributes)
        if self.dropped_attributes_count:
            proto_serializer.serialize_uint32(b" ", self.dropped_attributes_count)
