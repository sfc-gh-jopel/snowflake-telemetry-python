# Generated by the protoc compiler with a custom plugin. DO NOT EDIT!
# sources: opentelemetry/proto/resource/v1/resource.proto

from __future__ import annotations

import struct
from typing import (
    List,
    Optional,
)

from snowflake.telemetry._internal.opentelemetry.proto.common.v1 import *
from snowflake.telemetry._internal.serialize import (
    Enum,
    MessageMarshaler,
    ProtoSerializer,
    size_varint32,
    size_varint64,
)


class Resource(MessageMarshaler):
    def __init__(
        self,
        attributes: List[KeyValue] = None,
        dropped_attributes_count: int = 0,
    ):
        self.attributes: List[KeyValue] = attributes
        self.dropped_attributes_count: int = dropped_attributes_count

    def calculate_size(self) -> int:
        size = 0
        if self.attributes:
            size += sum(
                message._get_size() + len(b"\n") + size_varint32(message._get_size())
                for message in self.attributes
            )
        if self.dropped_attributes_count:
            size += len(b"\x10") + size_varint32(self.dropped_attributes_count)
        return size

    def write_to(self, proto_serializer: ProtoSerializer) -> None:
        if self.attributes:
            for v in self.attributes:
                proto_serializer.out.write(b"\n")
                proto_serializer._write_varint_unsigned(v._get_size())
                v.write_to(proto_serializer)
        if self.dropped_attributes_count:
            proto_serializer.out.write(b"\x10")
            proto_serializer._write_varint_unsigned(self.dropped_attributes_count)
