# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: opentelemetry/proto/common/v1/common.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List

import betterproto


@dataclass
class AnyValue(betterproto.Message):
    """
    AnyValue is used to represent any type of attribute value. AnyValue may
    contain a primitive value such as a string or integer or it may contain an
    arbitrary nested object containing arrays, key-value lists and primitives.
    """

    string_value: str = betterproto.string_field(1, group="value")
    bool_value: bool = betterproto.bool_field(2, group="value")
    int_value: int = betterproto.int64_field(3, group="value")
    double_value: float = betterproto.double_field(4, group="value")
    array_value: "ArrayValue" = betterproto.message_field(5, group="value")
    kvlist_value: "KeyValueList" = betterproto.message_field(6, group="value")
    bytes_value: bytes = betterproto.bytes_field(7, group="value")


@dataclass
class ArrayValue(betterproto.Message):
    """
    ArrayValue is a list of AnyValue messages. We need ArrayValue as a message
    since oneof in AnyValue does not allow repeated fields.
    """

    # Array of values. The array may be empty (contain 0 elements).
    values: List["AnyValue"] = betterproto.message_field(1)


@dataclass
class KeyValueList(betterproto.Message):
    """
    KeyValueList is a list of KeyValue messages. We need KeyValueList as a
    message since `oneof` in AnyValue does not allow repeated fields.
    Everywhere else where we need a list of KeyValue messages (e.g. in Span) we
    use `repeated KeyValue` directly to avoid unnecessary extra wrapping (which
    slows down the protocol). The 2 approaches are semantically equivalent.
    """

    # A collection of key/value pairs of key-value pairs. The list may be empty
    # (may contain 0 elements). The keys MUST be unique (it is not allowed to
    # have more than one value with the same key).
    values: List["KeyValue"] = betterproto.message_field(1)


@dataclass
class KeyValue(betterproto.Message):
    """
    KeyValue is a key-value pair that is used to store Span attributes, Link
    attributes, etc.
    """

    key: str = betterproto.string_field(1)
    value: "AnyValue" = betterproto.message_field(2)


@dataclass
class InstrumentationScope(betterproto.Message):
    """
    InstrumentationScope is a message representing the instrumentation scope
    information such as the fully qualified name and version.
    """

    # An empty instrumentation scope name means the name is unknown.
    name: str = betterproto.string_field(1)
    version: str = betterproto.string_field(2)
    # Additional attributes that describe the scope. [Optional]. Attribute keys
    # MUST be unique (it is not allowed to have more than one attribute with the
    # same key).
    attributes: List["KeyValue"] = betterproto.message_field(3)
    dropped_attributes_count: int = betterproto.uint32_field(4)
