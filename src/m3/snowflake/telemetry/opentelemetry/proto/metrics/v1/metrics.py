# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources:
# plugin: python-serialize

from typing import List

from m3.snowflake.telemetry.serialize import (
    Enum,
    MessageMarshaler,
    ProtoSerializer,
)


class AggregationTemporality(Enum):
    AGGREGATION_TEMPORALITY_UNSPECIFIED = 0
    AGGREGATION_TEMPORALITY_DELTA = 1
    AGGREGATION_TEMPORALITY_CUMULATIVE = 2


class DataPointFlags(Enum):
    DATA_POINT_FLAGS_DO_NOT_USE = 0
    DATA_POINT_FLAGS_NO_RECORDED_VALUE_MASK = 1


def write_to_MetricsData(
    proto_serializer: ProtoSerializer,
    resource_metrics: List[MessageMarshaler] = None,
):
    if resource_metrics:
        proto_serializer.serialize_repeated_message(b"\n", resource_metrics)


def write_to_ResourceMetrics(
    proto_serializer: ProtoSerializer,
    resource: MessageMarshaler = None,
    scope_metrics: List[MessageMarshaler] = None,
    schema_url: str = "",
):
    if schema_url:
        proto_serializer.serialize_string(b"\x1a", schema_url)
    if scope_metrics:
        proto_serializer.serialize_repeated_message(b"\x12", scope_metrics)
    if resource:
        proto_serializer.serialize_message(b"\n", resource)


def write_to_ScopeMetrics(
    proto_serializer: ProtoSerializer,
    scope: MessageMarshaler = None,
    metrics: List[MessageMarshaler] = None,
    schema_url: str = "",
):
    if schema_url:
        proto_serializer.serialize_string(b"\x1a", schema_url)
    if metrics:
        proto_serializer.serialize_repeated_message(b"\x12", metrics)
    if scope:
        proto_serializer.serialize_message(b"\n", scope)


def write_to_Metric(
    proto_serializer: ProtoSerializer,
    name: str = "",
    description: str = "",
    unit: str = "",
    gauge: MessageMarshaler = None,
    sum: MessageMarshaler = None,
    histogram: MessageMarshaler = None,
    exponential_histogram: MessageMarshaler = None,
    summary: MessageMarshaler = None,
    metadata: List[MessageMarshaler] = None,
):
    if metadata:
        proto_serializer.serialize_repeated_message(b"b", metadata)
    # oneof group data
    if summary is not None:
        proto_serializer.serialize_message(b"Z", summary)
    elif exponential_histogram is not None:
        proto_serializer.serialize_message(b"R", exponential_histogram)
    elif histogram is not None:
        proto_serializer.serialize_message(b"J", histogram)
    elif sum is not None:
        proto_serializer.serialize_message(b":", sum)
    elif gauge is not None:
        proto_serializer.serialize_message(b"*", gauge)
    if unit:
        proto_serializer.serialize_string(b"\x1a", unit)
    if description:
        proto_serializer.serialize_string(b"\x12", description)
    if name:
        proto_serializer.serialize_string(b"\n", name)


def write_to_Gauge(
    proto_serializer: ProtoSerializer,
    data_points: List[MessageMarshaler] = None,
):
    if data_points:
        proto_serializer.serialize_repeated_message(b"\n", data_points)


def write_to_Sum(
    proto_serializer: ProtoSerializer,
    data_points: List[MessageMarshaler] = None,
    aggregation_temporality: int = 0,
    is_monotonic: bool = False,
):
    if is_monotonic:
        proto_serializer.serialize_bool(b"\x18", is_monotonic)
    if aggregation_temporality:
        proto_serializer.serialize_enum(b"\x10", aggregation_temporality)
    if data_points:
        proto_serializer.serialize_repeated_message(b"\n", data_points)


def write_to_Histogram(
    proto_serializer: ProtoSerializer,
    data_points: List[MessageMarshaler] = None,
    aggregation_temporality: int = 0,
):
    if aggregation_temporality:
        proto_serializer.serialize_enum(b"\x10", aggregation_temporality)
    if data_points:
        proto_serializer.serialize_repeated_message(b"\n", data_points)


def write_to_ExponentialHistogram(
    proto_serializer: ProtoSerializer,
    data_points: List[MessageMarshaler] = None,
    aggregation_temporality: int = 0,
):
    if aggregation_temporality:
        proto_serializer.serialize_enum(b"\x10", aggregation_temporality)
    if data_points:
        proto_serializer.serialize_repeated_message(b"\n", data_points)


def write_to_Summary(
    proto_serializer: ProtoSerializer,
    data_points: List[MessageMarshaler] = None,
):
    if data_points:
        proto_serializer.serialize_repeated_message(b"\n", data_points)


def write_to_NumberDataPoint(
    proto_serializer: ProtoSerializer,
    start_time_unix_nano: int = 0,
    time_unix_nano: int = 0,
    exemplars: List[MessageMarshaler] = None,
    as_double: float = None,
    as_int: int = None,
    attributes: List[MessageMarshaler] = None,
    flags: int = 0,
):
    if flags:
        proto_serializer.serialize_uint32(b"@", flags)
    if attributes:
        proto_serializer.serialize_repeated_message(b":", attributes)
    # oneof group value
    if as_int is not None:
        proto_serializer.serialize_sfixed64(b"1", as_int)
    elif as_double is not None:
        proto_serializer.serialize_double(b"!", as_double)
    if exemplars:
        proto_serializer.serialize_repeated_message(b"*", exemplars)
    if time_unix_nano:
        proto_serializer.serialize_fixed64(b"\x19", time_unix_nano)
    if start_time_unix_nano:
        proto_serializer.serialize_fixed64(b"\x11", start_time_unix_nano)


def write_to_HistogramDataPoint(
    proto_serializer: ProtoSerializer,
    start_time_unix_nano: int = 0,
    time_unix_nano: int = 0,
    count: int = 0,
    sum: float = None,
    bucket_counts: List[int] = None,
    explicit_bounds: List[float] = None,
    exemplars: List[MessageMarshaler] = None,
    attributes: List[MessageMarshaler] = None,
    flags: int = 0,
    min: float = None,
    max: float = None,
):
    # oneof group _max
    if max is not None:
        proto_serializer.serialize_double(b"a", max)
    # oneof group _min
    if min is not None:
        proto_serializer.serialize_double(b"Y", min)
    if flags:
        proto_serializer.serialize_uint32(b"P", flags)
    if attributes:
        proto_serializer.serialize_repeated_message(b"J", attributes)
    if exemplars:
        proto_serializer.serialize_repeated_message(b"B", exemplars)
    if explicit_bounds:
        proto_serializer.serialize_repeated_double(b":", explicit_bounds)
    if bucket_counts:
        proto_serializer.serialize_repeated_fixed64(b"2", bucket_counts)
    # oneof group _sum
    if sum is not None:
        proto_serializer.serialize_double(b")", sum)
    if count:
        proto_serializer.serialize_fixed64(b"!", count)
    if time_unix_nano:
        proto_serializer.serialize_fixed64(b"\x19", time_unix_nano)
    if start_time_unix_nano:
        proto_serializer.serialize_fixed64(b"\x11", start_time_unix_nano)


def write_to_ExponentialHistogramDataPoint(
    proto_serializer: ProtoSerializer,
    attributes: List[MessageMarshaler] = None,
    start_time_unix_nano: int = 0,
    time_unix_nano: int = 0,
    count: int = 0,
    sum: float = None,
    scale: int = 0,
    zero_count: int = 0,
    positive: MessageMarshaler = None,
    negative: MessageMarshaler = None,
    flags: int = 0,
    exemplars: List[MessageMarshaler] = None,
    min: float = None,
    max: float = None,
    zero_threshold: float = 0.0,
):
    if zero_threshold:
        proto_serializer.serialize_double(b"q", zero_threshold)
    # oneof group _max
    if max is not None:
        proto_serializer.serialize_double(b"i", max)
    # oneof group _min
    if min is not None:
        proto_serializer.serialize_double(b"a", min)
    if exemplars:
        proto_serializer.serialize_repeated_message(b"Z", exemplars)
    if flags:
        proto_serializer.serialize_uint32(b"P", flags)
    if negative:
        proto_serializer.serialize_message(b"J", negative)
    if positive:
        proto_serializer.serialize_message(b"B", positive)
    if zero_count:
        proto_serializer.serialize_fixed64(b"9", zero_count)
    if scale:
        proto_serializer.serialize_sint32(b"0", scale)
    # oneof group _sum
    if sum is not None:
        proto_serializer.serialize_double(b")", sum)
    if count:
        proto_serializer.serialize_fixed64(b"!", count)
    if time_unix_nano:
        proto_serializer.serialize_fixed64(b"\x19", time_unix_nano)
    if start_time_unix_nano:
        proto_serializer.serialize_fixed64(b"\x11", start_time_unix_nano)
    if attributes:
        proto_serializer.serialize_repeated_message(b"\n", attributes)


def write_to_SummaryDataPoint(
    proto_serializer: ProtoSerializer,
    start_time_unix_nano: int = 0,
    time_unix_nano: int = 0,
    count: int = 0,
    sum: float = 0.0,
    quantile_values: List[MessageMarshaler] = None,
    attributes: List[MessageMarshaler] = None,
    flags: int = 0,
):
    if flags:
        proto_serializer.serialize_uint32(b"@", flags)
    if attributes:
        proto_serializer.serialize_repeated_message(b":", attributes)
    if quantile_values:
        proto_serializer.serialize_repeated_message(b"2", quantile_values)
    if sum:
        proto_serializer.serialize_double(b")", sum)
    if count:
        proto_serializer.serialize_fixed64(b"!", count)
    if time_unix_nano:
        proto_serializer.serialize_fixed64(b"\x19", time_unix_nano)
    if start_time_unix_nano:
        proto_serializer.serialize_fixed64(b"\x11", start_time_unix_nano)


def write_to_Exemplar(
    proto_serializer: ProtoSerializer,
    time_unix_nano: int = 0,
    span_id: bytes = b"",
    trace_id: bytes = b"",
    as_double: float = None,
    as_int: int = None,
    filtered_attributes: List[MessageMarshaler] = None,
):
    if filtered_attributes:
        proto_serializer.serialize_repeated_message(b":", filtered_attributes)
    # oneof group value
    if as_int is not None:
        proto_serializer.serialize_sfixed64(b"1", as_int)
    elif as_double is not None:
        proto_serializer.serialize_double(b"\x19", as_double)
    if trace_id:
        proto_serializer.serialize_bytes(b"*", trace_id)
    if span_id:
        proto_serializer.serialize_bytes(b'"', span_id)
    if time_unix_nano:
        proto_serializer.serialize_fixed64(b"\x11", time_unix_nano)
