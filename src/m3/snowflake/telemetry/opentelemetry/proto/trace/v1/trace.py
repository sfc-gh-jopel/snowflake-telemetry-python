# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources:
# plugin: python-serialize

from typing import List

from m3.snowflake.telemetry.serialize import (
    Enum,
    MessageMarshaler,
    ProtoSerializer,
)


class SpanFlags(Enum):
    SPAN_FLAGS_DO_NOT_USE = 0
    SPAN_FLAGS_TRACE_FLAGS_MASK = 255
    SPAN_FLAGS_CONTEXT_HAS_IS_REMOTE_MASK = 256
    SPAN_FLAGS_CONTEXT_IS_REMOTE_MASK = 512


def write_to_TracesData(
    proto_serializer: ProtoSerializer,
    resource_spans: List[MessageMarshaler] = None,
):
    if resource_spans:
        proto_serializer.serialize_repeated_message(b"\n", resource_spans)


def write_to_ResourceSpans(
    proto_serializer: ProtoSerializer,
    resource: MessageMarshaler = None,
    scope_spans: List[MessageMarshaler] = None,
    schema_url: str = "",
):
    if schema_url:
        proto_serializer.serialize_string(b"\x1a", schema_url)
    if scope_spans:
        proto_serializer.serialize_repeated_message(b"\x12", scope_spans)
    if resource:
        proto_serializer.serialize_message(b"\n", resource)


def write_to_ScopeSpans(
    proto_serializer: ProtoSerializer,
    scope: MessageMarshaler = None,
    spans: List[MessageMarshaler] = None,
    schema_url: str = "",
):
    if schema_url:
        proto_serializer.serialize_string(b"\x1a", schema_url)
    if spans:
        proto_serializer.serialize_repeated_message(b"\x12", spans)
    if scope:
        proto_serializer.serialize_message(b"\n", scope)


def write_to_Span(
    proto_serializer: ProtoSerializer,
    trace_id: bytes = b"",
    span_id: bytes = b"",
    trace_state: str = "",
    parent_span_id: bytes = b"",
    name: str = "",
    kind: int = 0,
    start_time_unix_nano: int = 0,
    end_time_unix_nano: int = 0,
    attributes: List[MessageMarshaler] = None,
    dropped_attributes_count: int = 0,
    events: List[MessageMarshaler] = None,
    dropped_events_count: int = 0,
    links: List[MessageMarshaler] = None,
    dropped_links_count: int = 0,
    status: MessageMarshaler = None,
    flags: int = 0,
):
    if flags:
        proto_serializer.serialize_fixed32(b"\x85\x01", flags)
    if status:
        proto_serializer.serialize_message(b"z", status)
    if dropped_links_count:
        proto_serializer.serialize_uint32(b"p", dropped_links_count)
    if links:
        proto_serializer.serialize_repeated_message(b"j", links)
    if dropped_events_count:
        proto_serializer.serialize_uint32(b"`", dropped_events_count)
    if events:
        proto_serializer.serialize_repeated_message(b"Z", events)
    if dropped_attributes_count:
        proto_serializer.serialize_uint32(b"P", dropped_attributes_count)
    if attributes:
        proto_serializer.serialize_repeated_message(b"J", attributes)
    if end_time_unix_nano:
        proto_serializer.serialize_fixed64(b"A", end_time_unix_nano)
    if start_time_unix_nano:
        proto_serializer.serialize_fixed64(b"9", start_time_unix_nano)
    if kind:
        proto_serializer.serialize_enum(b"0", kind)
    if name:
        proto_serializer.serialize_string(b"*", name)
    if parent_span_id:
        proto_serializer.serialize_bytes(b'"', parent_span_id)
    if trace_state:
        proto_serializer.serialize_string(b"\x1a", trace_state)
    if span_id:
        proto_serializer.serialize_bytes(b"\x12", span_id)
    if trace_id:
        proto_serializer.serialize_bytes(b"\n", trace_id)


def write_to_Status(
    proto_serializer: ProtoSerializer,
    message: str = "",
    code: int = 0,
):
    if code:
        proto_serializer.serialize_enum(b"\x18", code)
    if message:
        proto_serializer.serialize_string(b"\x12", message)
